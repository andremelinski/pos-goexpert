version: '3'
services:
    jaeger-all-in-one:
        image: jaegertracing/all-in-one:latest
        restart: always
        ports:
            - '16686:16686'
            - '14268'
            - '14250'
    # fica pegando as metricas do collector para armazenar e expor pelo granafa
    prometheus:
        container_name: prometheus
        image: prom/prometheus:latest
        restart: always
        volumes:
            - ./.docker/prometheus.yaml:/etc/prometheus/prometheus.yml
        ports:
            - '9090:9090'
    # prometheus vai ficar observando o collector
    otel-collector:
        image: otel/opentelemetry-collector:latest
        restart: always
        # config do opentelemetry fala por onde eles serao recebidos e processados e pra onde serao enviados
        command: ['--config=/etc/otel-collector-config.yaml']
        volumes:
            - ./.docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
        ports:
            - '8888:8888' # Prometheus metrics exposed by the collector
            - '8889:8889' # Prometheus exporter metrics
            - '4317:4317' # OTLP gRPC receiver -> porta principal

    grafana:
        container_name: grafana
        image: grafana/grafana:latest
        restart: always
        ports:
            - '3001:3000'
        depends_on:
            - prometheus

    goapp:
        container_name: goapp
        build:
            context: .
        environment:
            - TITLE=Microservice Demo
            - CONTENT=This is a demo of a microservice
            - BACKGROUND_COLOR=green
            - RESPONSE_TIME=1000
            - EXTERNAL_CALL_URL=http://goapp2:8181
            - EXTERNAL_CALL_METHOD=GET
            - REQUEST_NAME_OTEL=microservice-demo-request
            - OTEL_SERVICE_NAME=microservice-demo
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
            - HTTP_PORT=:8080
        ports:
            - '8080:8080'
        depends_on:
            - jaeger-all-in-one
            - prometheus
            - otel-collector

    goapp2:
        container_name: goapp2
        build:
            context: .
        environment:
            - TITLE=Microservice Demo 2
            - CONTENT=This is a demo of a microservice
            - BACKGROUND_COLOR=blue
            - EXTERNAL_CALL_URL=http://goapp3:8282
            - EXTERNAL_CALL_METHOD=GET
            - RESPONSE_TIME=2000
            - REQUEST_NAME_OTEL=microservice-demo2-request
            - OTEL_SERVICE_NAME=microservice-demo2
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
            - HTTP_PORT=:8181
        ports:
            - '8181:8181'
        depends_on:
            - jaeger-all-in-one
            - prometheus
            - otel-collector

    goapp3:
        container_name: goapp3
        build:
            context: .
        environment:
            - TITLE=Microservice Demo 3
            - CONTENT=This is a demo of a microservice
            - BACKGROUND_COLOR=green
            - RESPONSE_TIME=2000
            - REQUEST_NAME_OTEL=microservice-demo3-request
            - OTEL_SERVICE_NAME=microservice-demo3
            - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
            - HTTP_PORT=:8282
        ports:
            - '8282:8282'
        depends_on:
            - jaeger-all-in-one
            - prometheus
            - otel-collector
